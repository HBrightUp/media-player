// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_music_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_music_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_music_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_music_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_music_2eproto;
namespace media {
class DownOneMusic;
struct DownOneMusicDefaultTypeInternal;
extern DownOneMusicDefaultTypeInternal _DownOneMusic_default_instance_;
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class PlayOnlineRandom;
struct PlayOnlineRandomDefaultTypeInternal;
extern PlayOnlineRandomDefaultTypeInternal _PlayOnlineRandom_default_instance_;
class PlayOnlineRandomRsp;
struct PlayOnlineRandomRspDefaultTypeInternal;
extern PlayOnlineRandomRspDefaultTypeInternal _PlayOnlineRandomRsp_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> ::media::DownOneMusic* Arena::CreateMaybeMessage<::media::DownOneMusic>(Arena*);
template<> ::media::Login* Arena::CreateMaybeMessage<::media::Login>(Arena*);
template<> ::media::PlayOnlineRandom* Arena::CreateMaybeMessage<::media::PlayOnlineRandom>(Arena*);
template<> ::media::PlayOnlineRandomRsp* Arena::CreateMaybeMessage<::media::PlayOnlineRandomRsp>(Arena*);
template<> ::media::Response* Arena::CreateMaybeMessage<::media::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace media {

enum MsgType : int {
  RESPONSE = 0,
  LOGIN = 1,
  PLAY_ONLINE_RANDOM = 2,
  PLAY_ONLINE_RANDOM_RESPONSE = 3,
  DOWN_ONE_MUSIC = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = RESPONSE;
constexpr MsgType MsgType_MAX = DOWN_ONE_MUSIC;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit constexpr Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:media.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_music_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserved2FieldNumber = 4,
    kCmdFieldNumber = 1,
    kCodeFieldNumber = 2,
    kReserved1FieldNumber = 3,
  };
  // string reserved2 = 4;
  void clear_reserved2();
  const std::string& reserved2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved2();
  PROTOBUF_NODISCARD std::string* release_reserved2();
  void set_allocated_reserved2(std::string* reserved2);
  private:
  const std::string& _internal_reserved2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved2(const std::string& value);
  std::string* _internal_mutable_reserved2();
  public:

  // .media.MsgType cmd = 1;
  void clear_cmd();
  ::media::MsgType cmd() const;
  void set_cmd(::media::MsgType value);
  private:
  ::media::MsgType _internal_cmd() const;
  void _internal_set_cmd(::media::MsgType value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 reserved1 = 3;
  void clear_reserved1();
  int32_t reserved1() const;
  void set_reserved1(int32_t value);
  private:
  int32_t _internal_reserved1() const;
  void _internal_set_reserved1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:media.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved2_;
  int cmd_;
  int32_t code_;
  int32_t reserved1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_music_2eproto;
};
// -------------------------------------------------------------------

class PlayOnlineRandom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media.PlayOnlineRandom) */ {
 public:
  inline PlayOnlineRandom() : PlayOnlineRandom(nullptr) {}
  ~PlayOnlineRandom() override;
  explicit constexpr PlayOnlineRandom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayOnlineRandom(const PlayOnlineRandom& from);
  PlayOnlineRandom(PlayOnlineRandom&& from) noexcept
    : PlayOnlineRandom() {
    *this = ::std::move(from);
  }

  inline PlayOnlineRandom& operator=(const PlayOnlineRandom& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayOnlineRandom& operator=(PlayOnlineRandom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayOnlineRandom& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayOnlineRandom* internal_default_instance() {
    return reinterpret_cast<const PlayOnlineRandom*>(
               &_PlayOnlineRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayOnlineRandom& a, PlayOnlineRandom& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayOnlineRandom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayOnlineRandom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayOnlineRandom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayOnlineRandom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayOnlineRandom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayOnlineRandom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayOnlineRandom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.PlayOnlineRandom";
  }
  protected:
  explicit PlayOnlineRandom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:media.PlayOnlineRandom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_music_2eproto;
};
// -------------------------------------------------------------------

class PlayOnlineRandomRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media.PlayOnlineRandomRsp) */ {
 public:
  inline PlayOnlineRandomRsp() : PlayOnlineRandomRsp(nullptr) {}
  ~PlayOnlineRandomRsp() override;
  explicit constexpr PlayOnlineRandomRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayOnlineRandomRsp(const PlayOnlineRandomRsp& from);
  PlayOnlineRandomRsp(PlayOnlineRandomRsp&& from) noexcept
    : PlayOnlineRandomRsp() {
    *this = ::std::move(from);
  }

  inline PlayOnlineRandomRsp& operator=(const PlayOnlineRandomRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayOnlineRandomRsp& operator=(PlayOnlineRandomRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayOnlineRandomRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayOnlineRandomRsp* internal_default_instance() {
    return reinterpret_cast<const PlayOnlineRandomRsp*>(
               &_PlayOnlineRandomRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayOnlineRandomRsp& a, PlayOnlineRandomRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayOnlineRandomRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayOnlineRandomRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayOnlineRandomRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayOnlineRandomRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayOnlineRandomRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayOnlineRandomRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayOnlineRandomRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.PlayOnlineRandomRsp";
  }
  protected:
  explicit PlayOnlineRandomRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMusicNameFieldNumber = 1,
  };
  // repeated string musicName = 1;
  int musicname_size() const;
  private:
  int _internal_musicname_size() const;
  public:
  void clear_musicname();
  const std::string& musicname(int index) const;
  std::string* mutable_musicname(int index);
  void set_musicname(int index, const std::string& value);
  void set_musicname(int index, std::string&& value);
  void set_musicname(int index, const char* value);
  void set_musicname(int index, const char* value, size_t size);
  std::string* add_musicname();
  void add_musicname(const std::string& value);
  void add_musicname(std::string&& value);
  void add_musicname(const char* value);
  void add_musicname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& musicname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_musicname();
  private:
  const std::string& _internal_musicname(int index) const;
  std::string* _internal_add_musicname();
  public:

  // @@protoc_insertion_point(class_scope:media.PlayOnlineRandomRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> musicname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_music_2eproto;
};
// -------------------------------------------------------------------

class DownOneMusic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media.DownOneMusic) */ {
 public:
  inline DownOneMusic() : DownOneMusic(nullptr) {}
  ~DownOneMusic() override;
  explicit constexpr DownOneMusic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownOneMusic(const DownOneMusic& from);
  DownOneMusic(DownOneMusic&& from) noexcept
    : DownOneMusic() {
    *this = ::std::move(from);
  }

  inline DownOneMusic& operator=(const DownOneMusic& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownOneMusic& operator=(DownOneMusic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownOneMusic& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownOneMusic* internal_default_instance() {
    return reinterpret_cast<const DownOneMusic*>(
               &_DownOneMusic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DownOneMusic& a, DownOneMusic& b) {
    a.Swap(&b);
  }
  inline void Swap(DownOneMusic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownOneMusic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownOneMusic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownOneMusic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownOneMusic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownOneMusic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownOneMusic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.DownOneMusic";
  }
  protected:
  explicit DownOneMusic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kMusicNameFieldNumber = 2,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string musicName = 2;
  void clear_musicname();
  const std::string& musicname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_musicname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_musicname();
  PROTOBUF_NODISCARD std::string* release_musicname();
  void set_allocated_musicname(std::string* musicname);
  private:
  const std::string& _internal_musicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_musicname(const std::string& value);
  std::string* _internal_mutable_musicname();
  public:

  // @@protoc_insertion_point(class_scope:media.DownOneMusic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr musicname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_music_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string userName = 1;
inline void Login::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:media.Login.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.Login.userName)
}
inline std::string* Login::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:media.Login.userName)
  return _s;
}
inline const std::string& Login::_internal_username() const {
  return username_.Get();
}
inline void Login::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:media.Login.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.Login.userName)
}

// string pwd = 2;
inline void Login::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& Login::pwd() const {
  // @@protoc_insertion_point(field_get:media.Login.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.Login.pwd)
}
inline std::string* Login::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:media.Login.pwd)
  return _s;
}
inline const std::string& Login::_internal_pwd() const {
  return pwd_.Get();
}
inline void Login::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_pwd() {
  // @@protoc_insertion_point(field_release:media.Login.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.Login.pwd)
}

// -------------------------------------------------------------------

// Response

// .media.MsgType cmd = 1;
inline void Response::clear_cmd() {
  cmd_ = 0;
}
inline ::media::MsgType Response::_internal_cmd() const {
  return static_cast< ::media::MsgType >(cmd_);
}
inline ::media::MsgType Response::cmd() const {
  // @@protoc_insertion_point(field_get:media.Response.cmd)
  return _internal_cmd();
}
inline void Response::_internal_set_cmd(::media::MsgType value) {
  
  cmd_ = value;
}
inline void Response::set_cmd(::media::MsgType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:media.Response.cmd)
}

// int32 code = 2;
inline void Response::clear_code() {
  code_ = 0;
}
inline int32_t Response::_internal_code() const {
  return code_;
}
inline int32_t Response::code() const {
  // @@protoc_insertion_point(field_get:media.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void Response::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:media.Response.code)
}

// int32 reserved1 = 3;
inline void Response::clear_reserved1() {
  reserved1_ = 0;
}
inline int32_t Response::_internal_reserved1() const {
  return reserved1_;
}
inline int32_t Response::reserved1() const {
  // @@protoc_insertion_point(field_get:media.Response.reserved1)
  return _internal_reserved1();
}
inline void Response::_internal_set_reserved1(int32_t value) {
  
  reserved1_ = value;
}
inline void Response::set_reserved1(int32_t value) {
  _internal_set_reserved1(value);
  // @@protoc_insertion_point(field_set:media.Response.reserved1)
}

// string reserved2 = 4;
inline void Response::clear_reserved2() {
  reserved2_.ClearToEmpty();
}
inline const std::string& Response::reserved2() const {
  // @@protoc_insertion_point(field_get:media.Response.reserved2)
  return _internal_reserved2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_reserved2(ArgT0&& arg0, ArgT... args) {
 
 reserved2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.Response.reserved2)
}
inline std::string* Response::mutable_reserved2() {
  std::string* _s = _internal_mutable_reserved2();
  // @@protoc_insertion_point(field_mutable:media.Response.reserved2)
  return _s;
}
inline const std::string& Response::_internal_reserved2() const {
  return reserved2_.Get();
}
inline void Response::_internal_set_reserved2(const std::string& value) {
  
  reserved2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_reserved2() {
  
  return reserved2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_reserved2() {
  // @@protoc_insertion_point(field_release:media.Response.reserved2)
  return reserved2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_reserved2(std::string* reserved2) {
  if (reserved2 != nullptr) {
    
  } else {
    
  }
  reserved2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserved2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserved2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserved2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.Response.reserved2)
}

// -------------------------------------------------------------------

// PlayOnlineRandom

// string userName = 1;
inline void PlayOnlineRandom::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& PlayOnlineRandom::username() const {
  // @@protoc_insertion_point(field_get:media.PlayOnlineRandom.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayOnlineRandom::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.PlayOnlineRandom.userName)
}
inline std::string* PlayOnlineRandom::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:media.PlayOnlineRandom.userName)
  return _s;
}
inline const std::string& PlayOnlineRandom::_internal_username() const {
  return username_.Get();
}
inline void PlayOnlineRandom::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayOnlineRandom::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayOnlineRandom::release_username() {
  // @@protoc_insertion_point(field_release:media.PlayOnlineRandom.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayOnlineRandom::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.PlayOnlineRandom.userName)
}

// -------------------------------------------------------------------

// PlayOnlineRandomRsp

// repeated string musicName = 1;
inline int PlayOnlineRandomRsp::_internal_musicname_size() const {
  return musicname_.size();
}
inline int PlayOnlineRandomRsp::musicname_size() const {
  return _internal_musicname_size();
}
inline void PlayOnlineRandomRsp::clear_musicname() {
  musicname_.Clear();
}
inline std::string* PlayOnlineRandomRsp::add_musicname() {
  std::string* _s = _internal_add_musicname();
  // @@protoc_insertion_point(field_add_mutable:media.PlayOnlineRandomRsp.musicName)
  return _s;
}
inline const std::string& PlayOnlineRandomRsp::_internal_musicname(int index) const {
  return musicname_.Get(index);
}
inline const std::string& PlayOnlineRandomRsp::musicname(int index) const {
  // @@protoc_insertion_point(field_get:media.PlayOnlineRandomRsp.musicName)
  return _internal_musicname(index);
}
inline std::string* PlayOnlineRandomRsp::mutable_musicname(int index) {
  // @@protoc_insertion_point(field_mutable:media.PlayOnlineRandomRsp.musicName)
  return musicname_.Mutable(index);
}
inline void PlayOnlineRandomRsp::set_musicname(int index, const std::string& value) {
  musicname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::set_musicname(int index, std::string&& value) {
  musicname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::set_musicname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  musicname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::set_musicname(int index, const char* value, size_t size) {
  musicname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:media.PlayOnlineRandomRsp.musicName)
}
inline std::string* PlayOnlineRandomRsp::_internal_add_musicname() {
  return musicname_.Add();
}
inline void PlayOnlineRandomRsp::add_musicname(const std::string& value) {
  musicname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::add_musicname(std::string&& value) {
  musicname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::add_musicname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  musicname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:media.PlayOnlineRandomRsp.musicName)
}
inline void PlayOnlineRandomRsp::add_musicname(const char* value, size_t size) {
  musicname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:media.PlayOnlineRandomRsp.musicName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlayOnlineRandomRsp::musicname() const {
  // @@protoc_insertion_point(field_list:media.PlayOnlineRandomRsp.musicName)
  return musicname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlayOnlineRandomRsp::mutable_musicname() {
  // @@protoc_insertion_point(field_mutable_list:media.PlayOnlineRandomRsp.musicName)
  return &musicname_;
}

// -------------------------------------------------------------------

// DownOneMusic

// string userName = 1;
inline void DownOneMusic::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& DownOneMusic::username() const {
  // @@protoc_insertion_point(field_get:media.DownOneMusic.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownOneMusic::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.DownOneMusic.userName)
}
inline std::string* DownOneMusic::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:media.DownOneMusic.userName)
  return _s;
}
inline const std::string& DownOneMusic::_internal_username() const {
  return username_.Get();
}
inline void DownOneMusic::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownOneMusic::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownOneMusic::release_username() {
  // @@protoc_insertion_point(field_release:media.DownOneMusic.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownOneMusic::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.DownOneMusic.userName)
}

// string musicName = 2;
inline void DownOneMusic::clear_musicname() {
  musicname_.ClearToEmpty();
}
inline const std::string& DownOneMusic::musicname() const {
  // @@protoc_insertion_point(field_get:media.DownOneMusic.musicName)
  return _internal_musicname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownOneMusic::set_musicname(ArgT0&& arg0, ArgT... args) {
 
 musicname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media.DownOneMusic.musicName)
}
inline std::string* DownOneMusic::mutable_musicname() {
  std::string* _s = _internal_mutable_musicname();
  // @@protoc_insertion_point(field_mutable:media.DownOneMusic.musicName)
  return _s;
}
inline const std::string& DownOneMusic::_internal_musicname() const {
  return musicname_.Get();
}
inline void DownOneMusic::_internal_set_musicname(const std::string& value) {
  
  musicname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownOneMusic::_internal_mutable_musicname() {
  
  return musicname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownOneMusic::release_musicname() {
  // @@protoc_insertion_point(field_release:media.DownOneMusic.musicName)
  return musicname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownOneMusic::set_allocated_musicname(std::string* musicname) {
  if (musicname != nullptr) {
    
  } else {
    
  }
  musicname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), musicname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (musicname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    musicname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:media.DownOneMusic.musicName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace media

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::media::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::media::MsgType>() {
  return ::media::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_music_2eproto
